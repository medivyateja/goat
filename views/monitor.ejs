<%- include('partials/header-2', {title: "GOAT Vote Monitor"}) %>

    <!-- Navigation -->
    <nav class="fixed top-0 left-0 right-0 bg-[#1a237e] border-b-2 border-red-600 z-50">
        <div class="max-w-7xl mx-auto px-4">
            <div class="flex justify-between items-center h-16">
                <a href="/" class="text-2xl font-bold text-white">?</a>
                <button class="text-white">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16m-7 6h7" />
                    </svg>
                </button>
            </div>
        </div>
    </nav>

    <!-- Hero Section -->
    <section class="pt-24 md:pt-32 pb-8">
        <div class="max-w-7xl mx-auto px-4">
            <div class="text-center">
                <h1 class="text-4xl sm:text-5xl md:text-6xl font-bold mb-4 text-white">
                    Live <span class="text-red-600">Vote</span> Monitor
                </h1>
                <p class="text-lg sm:text-xl text-white/80 mb-8 max-w-2xl mx-auto">
                    Track all votes in real-time. See the latest community choices and voting trends.
                </p>
            </div>
        </div>
    </section>

    <!-- Stats Section -->
    <section class="py-4">
        <div class="max-w-7xl mx-auto px-4">
            <!-- Vote Stats Cards -->
            <div class="grid grid-cols-2 sm:grid-cols-3 gap-4 mb-8">
                <!-- Ronaldo Stats -->
                <div class="col-span-1 sm:col-span-1 p-6 rounded-2xl bg-[#1a237e] text-center transform hover:scale-105 transition-all duration-300">
                    <h3 class="text-xl sm:text-2xl text-white font-bold mb-2">Ronaldo</h3>
                    <p class="text-3xl sm:text-4xl md:text-5xl font-bold text-red-500" id="ronaldo-votes">0</p>
                    <p class="text-sm text-gray-400 mt-1">votes</p>
                </div>
                
                <!-- Total Stats -->
                <div class="col-span-2 sm:col-span-1 p-6 rounded-2xl bg-[#1a237e] text-center transform hover:scale-105 transition-all duration-300 order-last sm:order-none">
                    <h3 class="text-xl sm:text-2xl text-white font-bold mb-2">Total Votes</h3>
                    <p class="text-3xl sm:text-4xl md:text-5xl font-bold text-white" id="total-votes">0</p>
                    <p class="text-sm text-gray-400 mt-1">from all users</p>
                </div>
                
                <!-- Messi Stats -->
                <div class="col-span-1 sm:col-span-1 p-6 rounded-2xl bg-[#1a237e] text-center transform hover:scale-105 transition-all duration-300">
                    <h3 class="text-xl sm:text-2xl text-white font-bold mb-2">Messi</h3>
                    <p class="text-3xl sm:text-4xl md:text-5xl font-bold text-blue-500" id="messi-votes">0</p>
                    <p class="text-sm text-gray-400 mt-1">votes</p>
                </div>
            </div>
            
            <!-- Progress Bar -->
            <div class="mb-8">
                <div class="relative w-full h-12 bg-[#1a237e] rounded-full overflow-hidden shadow-lg">
                    <div class="absolute top-0 left-0 h-full w-full flex">
                        <div class="h-full bg-red-600 transition-all duration-500 flex items-center justify-start pl-4" id="ronaldo-bar" style="width: 50%">
                            <span class="text-white font-medium text-sm md:text-base">Ronaldo</span>
                        </div>
                        <div class="h-full bg-blue-500 transition-all duration-500 flex items-center justify-end pr-4" id="messi-bar" style="width: 50%">
                            <span class="text-white font-medium text-sm md:text-base">Messi</span>
                        </div>
                    </div>
                </div>
                <div class="flex justify-between mt-2">
                    <span class="text-sm text-red-400 font-medium" id="ronaldo-percentage">50%</span>
                    <span class="text-sm text-blue-400 font-medium" id="messi-percentage">50%</span>
                </div>
            </div>
            
            <!-- Vote Feed -->
            <div class="bg-[#1a237e] rounded-2xl p-4 sm:p-6">
                <h2 class="text-2xl md:text-3xl text-white font-bold mb-6">Recent Votes</h2>
                <div class="space-y-4" id="vote-feed">
                    <!-- Vote entries will be populated here -->
                    <div class="text-center text-gray-400">Loading votes...</div>
                </div>
                
                <!-- Pagination -->
                <div class="mt-6 flex flex-col sm:flex-row justify-between items-center gap-4">
                    <button id="prev-page" class="w-full sm:w-auto px-4 py-2.5 rounded-full bg-blue-800 text-white text-sm font-semibold hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed">
                        Previous Page
                    </button>
                    <span id="page-info" class="text-sm sm:text-base text-gray-400">Page 1</span>
                    <button id="next-page" class="w-full sm:w-auto px-4 py-2.5 rounded-full bg-blue-800 text-white text-sm font-semibold hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed">
                        Next Page
                    </button>
                </div>
            </div>
        </div>
    </section>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/moment.min.js"></script>
    <script>
        let currentPage = 1;
        const itemsPerPage = 10;
        let allVotes = [];

        // Format wallet address
        function formatWallet(wallet) {
            return wallet.slice(0, 6) + '...' + wallet.slice(-4);
        }

        // Format GOAT balance
        function formatBalance(balance) {
            return new Intl.NumberFormat('en-US', {
                maximumFractionDigits: 2
            }).format(balance);
        }

        // Create vote entry HTML
        function createVoteEntry(vote) {
            const choiceColor = vote.choice === 'ronaldo' ? 'text-red-500' : 'text-blue-500';
            const bgHoverColor = vote.choice === 'ronaldo' ? 'hover:bg-red-900/20' : 'hover:bg-blue-900/20';
            
            return `
                <div class="bg-blue-900/30 rounded-xl p-4 ${bgHoverColor} transition-colors">
                    <div class="flex flex-col sm:flex-row justify-between items-start gap-3">
                        <div>
                            <span class="font-mono text-gray-400">${formatWallet(vote.wallet)}</span>
                            <p class="mt-2 text-white">Voted for <span class="${choiceColor} font-bold">${vote.choice.toUpperCase()}</span></p>
                            <p class="text-sm text-gray-400 mt-1">${moment(vote.timestamp).fromNow()}</p>
                        </div>
                        <div class="w-full sm:w-auto flex flex-row sm:flex-col justify-between sm:text-right">
                            <div>
                                <p class="text-sm text-gray-400">Balance</p>
                                <p class="font-mono text-white">${formatBalance(vote.goatBalance)} GOAT</p>
                            </div>
                            <div>
                                <p class="text-sm text-gray-400">Total Votes</p>
                                <p class="font-mono text-white">${vote.voteNumber}</p>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        }

        // Update vote feed
        function updateVoteFeed(votes) {
            const feed = document.getElementById('vote-feed');
            if (votes.length === 0) {
                feed.innerHTML = '<div class="text-center text-gray-400">No votes found</div>';
                return;
            }
            feed.innerHTML = votes.map(createVoteEntry).join('');
        }

        // Update stats
        function updateStats(stats) {
            // Update vote counts
            const ronaldoVotes = document.getElementById('ronaldo-votes');
            const messiVotes = document.getElementById('messi-votes');
            const totalVotes = document.getElementById('total-votes');
            const ronaldoBar = document.getElementById('ronaldo-bar');
            const messiBar = document.getElementById('messi-bar');
            const ronaldoPercentage = document.getElementById('ronaldo-percentage');
            const messiPercentage = document.getElementById('messi-percentage');
            
            // Update vote counts
            ronaldoVotes.textContent = stats.ronaldo.votes;
            messiVotes.textContent = stats.messi.votes;
            totalVotes.textContent = stats.totalVotes;
            
            // Calculate and update percentages
            const ronaldoPercent = parseFloat(stats.ronaldo.percentage);
            const messiPercent = parseFloat(stats.messi.percentage);
            
            // Update progress bars with smooth transition
            ronaldoBar.style.width = `${ronaldoPercent}%`;
            messiBar.style.width = `${messiPercent}%`;
            
            // Update percentage labels
            ronaldoPercentage.textContent = `${ronaldoPercent}%`;
            messiPercentage.textContent = `${messiPercent}%`;
        }

        // Fetch and update data
        async function fetchData() {
            try {
                const [statsRes, votesRes] = await Promise.all([
                    fetch('/vote/voting-stats'),
                    fetch('/vote/all-votes')
                ]);
                
                const statsData = await statsRes.json();
                if (!statsData.success) {
                    throw new Error('Failed to fetch stats');
                }
                
                const votes = await votesRes.json();
                updateStats(statsData.stats);
                allVotes = votes;
                updatePagination();
            } catch (error) {
                console.error('Error fetching data:', error);
                document.getElementById('vote-feed').innerHTML = 
                    '<div class="text-center text-red-400">Error loading votes. Please try again later.</div>';
            }
        }

        // Pagination
        function updatePagination() {
            const startIdx = (currentPage - 1) * itemsPerPage;
            const endIdx = startIdx + itemsPerPage;
            const pageVotes = allVotes.slice(startIdx, endIdx);
            
            updateVoteFeed(pageVotes);
            
            const totalPages = Math.ceil(allVotes.length / itemsPerPage);
            document.getElementById('page-info').textContent = `Page ${currentPage} of ${totalPages}`;
            
            document.getElementById('prev-page').disabled = currentPage === 1;
            document.getElementById('next-page').disabled = endIdx >= allVotes.length;
        }

        // Event listeners
        document.getElementById('prev-page').addEventListener('click', () => {
            if (currentPage > 1) {
                currentPage--;
                updatePagination();
                window.scrollTo({ top: 0, behavior: 'smooth' });
            }
        });

        document.getElementById('next-page').addEventListener('click', () => {
            const maxPage = Math.ceil(allVotes.length / itemsPerPage);
            if (currentPage < maxPage) {
                currentPage++;
                updatePagination();
                window.scrollTo({ top: 0, behavior: 'smooth' });
            }
        });

        // Initial load
        fetchData();
        
        // Refresh data every 30 seconds
        setInterval(fetchData, 30000);

        // Handle mobile menu button click
        document.querySelector('nav button').addEventListener('click', function() {
            // Add your mobile menu logic here
            console.log('Mobile menu clicked');
        });
    </script>

<%- include('partials/footer-2') %>