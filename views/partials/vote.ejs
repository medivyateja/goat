<section id="vote" class="py-24 bg-red-600/5 border-y-2 border-red-600">
    <div class="max-w-7xl mx-auto px-6 lg:px-8">
        <h2 class="text-4xl font-bold text-center mb-12 text-white">Cast Your Vote</h2>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
            <!-- Ronaldo Card -->
            <div class="p-6 rounded-2xl border-theme bg-blue-900 hover:bg-blue-900/80 transition-all">
                <div class="flex justify-center mb-6">
                    <img src="/images/ronaldo.jpg" alt="Ronaldo" class="w-32 h-32 rounded-full object-cover">
                </div>
                <h3 class="text-2xl font-bold text-white mb-6 text-center">Cristiano Ronaldo</h3>
                <div class="flex flex-col items-center">
                    <div class="text-white text-4xl font-bold mb-2">45%</div>
                    <div class="text-gray-300 text-lg mb-4">56,055 votes</div>
                    <div class="w-full bg-blue-950 rounded-full h-4">
                        <div class="bg-red-600 h-4 rounded-full" style="width: 45%"></div>
                    </div>
                </div>
            </div>

            <!-- Messi Card -->
            <div class="p-6 rounded-2xl border-theme bg-blue-900 hover:bg-blue-900/80 transition-all">
                <div class="flex justify-center mb-6">
                    <img src="/images/messi.avif" alt="Messi" class="w-32 h-32 rounded-full object-cover">
                </div>
                <h3 class="text-2xl font-bold text-white mb-6 text-center">Lionel Messi</h3>
                <div class="flex flex-col items-center">
                    <div class="text-white text-4xl font-bold mb-2">55%</div>
                    <div class="text-gray-300 text-lg mb-4">68,512 votes</div>
                    <div class="w-full bg-blue-950 rounded-full h-4">
                        <div class="bg-red-600 h-4 rounded-full" style="width: 55%"></div>
                    </div>
                </div>
            </div>
        </div>
        <div class="mt-8 text-center">
            <div class="text-white text-xl mb-6">Total Votes: <span class="font-bold">124,567</span></div>
            
            <!-- GOAT Balance with Loading State -->
            <div class="text-white text-xl mb-6">
                Your $GOAT Balance: 
                <span id="balanceWrapper" class="inline-flex items-center">
                    <span id="userGoatBalance" class="font-bold">0</span>
                    <span id="loadingSpinner" class="hidden ml-2">
                        <svg class="animate-spin h-5 w-5 text-red-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                    </span>
                </span>
            </div>

            <div class="flex justify-center gap-4">
                <button id="voteButton" class="px-8 py-3 rounded-full bg-red-600 text-white font-semibold hover:bg-red-700 transition-colors mb-4 disabled:opacity-50 disabled:cursor-not-allowed" disabled>
                    Cast Your Vote
                </button>
                <a id="buyGoatButton" href="#how-to-buy" class="hidden px-8 py-3 rounded-full bg-blue-900 border-2 border-red-600 text-white font-semibold hover:bg-blue-700 transition-colors mb-4">
                    Buy $GOAT
                </a>
            </div>
            <p class="text-sm text-white">* Connect your wallet and hold $GOAT tokens to cast your vote</p>
        </div>
    </div>
</section>

<script>
// Store current wallet address
let currentWalletAddress = null;

function isWalletConnected() {
    return window.solana && window.solana.isConnected;
}

function showLoading() {
    document.getElementById('loadingSpinner').classList.remove('hidden');
    document.getElementById('userGoatBalance').textContent = '...';
}

function hideLoading() {
    document.getElementById('loadingSpinner').classList.add('hidden');
}

function resetBalance() {
    document.getElementById('userGoatBalance').textContent = '0';
    document.getElementById('voteButton').disabled = true;
    document.getElementById('buyGoatButton').classList.remove('hidden');
    hideLoading();
}

function updateButtonsVisibility(goatBalance) {
    const voteButton = document.getElementById('voteButton');
    const buyGoatButton = document.getElementById('buyGoatButton');
    
    if (goatBalance > 0) {
        voteButton.disabled = false;
        buyGoatButton.classList.add('hidden');
    } else {
        voteButton.disabled = true;
        buyGoatButton.classList.remove('hidden');
    }
}

async function checkWalletChange() {
    if (!isWalletConnected()) {
        currentWalletAddress = null;
        resetBalance();
        return false;
    }

    const newWalletAddress = window.solana.publicKey.toString();
    if (newWalletAddress !== currentWalletAddress) {
        currentWalletAddress = newWalletAddress;
        return true;
    }
    return false;
}

async function fetchAndDisplayTokens() {
    if (!isWalletConnected()) {
        console.log('Waiting for wallet connection...');
        resetBalance();
        return;
    }

    const walletChanged = await checkWalletChange();
    if (!walletChanged && currentWalletAddress) {
        // If wallet hasn't changed and we already have an address, don't fetch again
        return;
    }

    showLoading();

    try {
        const response = await fetch('/wallet/get-tokens', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ wallet: currentWalletAddress })
        });

        const data = await response.json();
        
        if (data.success) {
            // Check for GOAT token
            const goatToken = data.tokens.find(token => 
                token.mint === '<%= process.env.YOUR_GOAT_TOKEN_MINT_ADDRESS %>'
            );
            
            // Update GOAT balance display
            const balanceElement = document.getElementById('userGoatBalance');
            
            if (goatToken) {
                const balance = parseFloat(goatToken.balance);
                balanceElement.textContent = balance;
                updateButtonsVisibility(balance);
            } else {
                balanceElement.textContent = '0';
                updateButtonsVisibility(0);
            }
        }
    } catch (error) {
        console.error('Error:', error);
        resetBalance();
    } finally {
        hideLoading();
    }
}

// Check for wallet changes periodically
setInterval(fetchAndDisplayTokens, 1000);

// Initialize when DOM loads
document.addEventListener('DOMContentLoaded', fetchAndDisplayTokens);

// Listen for wallet connection events
if (window.solana) {
    window.solana.on('connect', () => {
        currentWalletAddress = null; // Reset current address to force refresh
        fetchAndDisplayTokens();
    });
    
    window.solana.on('disconnect', () => {
        currentWalletAddress = null;
        resetBalance();
    });

    window.solana.on('accountChanged', () => {
        currentWalletAddress = null; // Reset current address to force refresh
        fetchAndDisplayTokens();
    });
}
</script>