<!-- vote.ejs - Partial template -->
<section id="vote" class="py-24 bg-red-600/5 border-y-2 border-red-600">
    <div class="max-w-7xl mx-auto px-6 lg:px-8">
        <h2 class="text-4xl font-bold text-center mb-12 text-white">Cast Your Vote</h2>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
            <!-- Ronaldo Card -->
            <div class="p-6 rounded-2xl border-theme bg-blue-900 hover:bg-blue-900/80 transition-all">
                <div class="flex justify-center mb-6">
                    <img src="/images/7.png" alt="Ronaldo" class="w-32 h-32 rounded-full object-cover">
                </div>
                <h3 class="text-2xl font-bold text-white mb-6 text-center">Cristiano Ronaldo</h3>
                <div class="flex flex-col items-center">
                    <div id="ronaldoPercentage" class="text-white text-4xl font-bold mb-2">0%</div>
                    <div id="ronaldoVotes" class="text-gray-300 text-lg mb-4">0 votes</div>
                    <div class="w-full bg-blue-950 rounded-full h-4">
                        <div id="ronaldoProgress" class="bg-red-600 h-4 rounded-full transition-all duration-500" style="width: 0%"></div>
                    </div>
                </div>
            </div>

            <!-- Messi Card -->
            <div class="p-6 rounded-2xl border-theme bg-blue-900 hover:bg-blue-900/80 transition-all">
                <div class="flex justify-center mb-6">
                    <img src="/images/10.png" alt="Messi" class="w-32 h-32 rounded-full object-cover">
                </div>
                <h3 class="text-2xl font-bold text-white mb-6 text-center">Lionel Messi</h3>
                <div class="flex flex-col items-center">
                    <div id="messiPercentage" class="text-white text-4xl font-bold mb-2">0%</div>
                    <div id="messiVotes" class="text-gray-300 text-lg mb-4">0 votes</div>
                    <div class="w-full bg-blue-950 rounded-full h-4">
                        <div id="messiProgress" class="bg-red-600 h-4 rounded-full transition-all duration-500" style="width: 0%"></div>
                    </div>
                </div>
            </div>
        </div>
        <div class="mt-8 text-center">
            <div class="text-white text-xl mb-6">Total Votes: <span id="totalVotes" class="font-bold">0</span></div>
            
            <!-- User Voting Info -->
            <div class="text-white text-xl mb-6">
                Your Total Votes: <span id="userTotalVotes" class="font-bold">0</span>
            </div>

            <!-- Countdown Timer -->
           
            
            <!-- GOAT Balance with Loading State -->
            <div class="text-white text-xl mb-6">
                Your $GOAT Balance: 
                <span id="balanceWrapper" class="inline-flex items-center">
                    <span id="userGoatBalance" class="font-bold">0</span>
                    <span id="loadingSpinner" class="hidden ml-2">
                        <svg class="animate-spin h-5 w-5 text-red-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                    </span>
                </span>
            </div>

            <div class="flex justify-center gap-4 flex-wrap">
                <button id="voteButton" class="px-8 py-3 rounded-full bg-red-600 text-white font-semibold hover:bg-red-700 transition-colors mb-4 disabled:opacity-50 disabled:cursor-not-allowed" disabled>
                    Cast Your Vote
                </button>
                <div id="votingButtons" class="hidden flex justify-center gap-4 mb-2">
                    <button onclick="castVote('ronaldo')" class="px-8 py-3 rounded-full bg-red-600 text-white font-semibold hover:bg-red-700 transition-colors">
                        Vote Ronaldo
                    </button>
                    <button onclick="castVote('messi')" class="px-8 py-3 rounded-full bg-red-600 text-white font-semibold hover:bg-red-700 transition-colors">
                        Vote Messi
                    </button>
                </div>
                <a id="buyGoatButton" href="#how-to-buy" class="hidden px-8 py-3 rounded-full bg-blue-900 border-2 border-red-600 text-white font-semibold hover:bg-blue-700 transition-colors mb-4">
                    Buy $GOAT
                </a>
            </div>
            <p class="text-sm text-white">* Connect your wallet and hold $GOAT tokens to cast your vote</p>
        </div>
    </div>
</section>

<script>
const VOTING_COOLDOWN = <%= typeof VOTING_COOLDOWN !== 'undefined' ? VOTING_COOLDOWN : (24 * 60 * 60 * 1000) %>;
let currentWalletAddress = null;
let votingEnabled = false;
let timerInterval;

function isWalletConnected() {
    return window.solana && window.solana.isConnected;
}

function showLoading() {
    document.getElementById('loadingSpinner').classList.remove('hidden');
    document.getElementById('userGoatBalance').textContent = '...';
}

function hideLoading() {
    document.getElementById('loadingSpinner').classList.add('hidden');
}

function resetBalance() {
    document.getElementById('userGoatBalance').textContent = '0';
    document.getElementById('voteButton').disabled = true;
    document.getElementById('buyGoatButton').classList.remove('hidden');
    document.getElementById('votingButtons').classList.add('hidden');
    document.getElementById('userTotalVotes').textContent = '0';
    clearInterval(timerInterval);
    hideLoading();
}

function updateTimer(nextVoteTime) {
    clearInterval(timerInterval);
    
    function updateDisplay() {
        const now = Date.now();
        const timeLeft = nextVoteTime - now;

        if (timeLeft <= 0) {
            clearInterval(timerInterval);
            checkVotingEligibility();
            return;
        }

        // Keep tracking time but don't update the UI
        const hours = Math.floor(timeLeft / (1000 * 60 * 60));
        const minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
        const seconds = Math.floor((timeLeft % (1000 * 60)) / 1000);
    }

    updateDisplay();
    timerInterval = setInterval(updateDisplay, 1000);
}

function showNotification(message, type) {
    const notification = document.createElement('div');
    notification.id = 'flash-message';
    notification.className = 'fixed top-24 right-0 transform translate-x-full z-50';
    
    const innerDiv = document.createElement('div');
    innerDiv.className = `bg-blue-900 text-white px-6 py-3 rounded-l-full shadow-lg border border-red-600 flex items-center ${
        type === 'success' ? 'border-green-500' : 'border-red-500'
    }`;
    
    const messageSpan = document.createElement('span');
    messageSpan.className = 'font-semibold';
    messageSpan.textContent = message;
    
    innerDiv.appendChild(messageSpan);
    notification.appendChild(innerDiv);
    document.body.appendChild(notification);

    // Add animation classes
    setTimeout(() => {
        notification.classList.add('animate-slide-in');
    }, 50);

    // Remove notification after delay
    setTimeout(() => {
        notification.classList.remove('animate-slide-in');
        notification.classList.add('animate-slide-out');
        setTimeout(() => {
            notification.remove();
        }, 500);
    }, 2000);
}

async function checkVotingEligibility() {
    if (!currentWalletAddress) return;

    try {
        const response = await fetch(`/vote/can-vote?wallet=${currentWalletAddress}`);
        const data = await response.json();
        
        if (data.success) {
            votingEnabled = data.canVote;
            const voteButton = document.getElementById('voteButton');
            document.getElementById('userTotalVotes').textContent = data.totalVotes.toLocaleString();
            
            if (data.canVote) {
                voteButton.textContent = 'Cast Your Vote';
                voteButton.disabled = false;
            } else {
                voteButton.disabled = true;
                // Still update timer in background but don't show UI
                updateTimer(data.nextVoteTime);
            }
        }
    } catch (error) {
        console.error('Error checking voting eligibility:', error);
        showNotification('Error checking voting eligibility', 'error');
    }
}

async function updateVotingStats() {
    try {
        const response = await fetch('/vote/voting-stats');
        const data = await response.json();
        
        if (data.success) {
            // Update Ronaldo stats with animation
            const ronaldoPercentage = document.getElementById('ronaldoPercentage');
            const ronaldoVotes = document.getElementById('ronaldoVotes');
            const ronaldoProgress = document.getElementById('ronaldoProgress');
            
            ronaldoPercentage.textContent = `${data.stats.ronaldo.percentage}%`;
            ronaldoVotes.textContent = `${data.stats.ronaldo.votes.toLocaleString()} votes`;
            ronaldoProgress.style.width = `${data.stats.ronaldo.percentage}%`;
            
            // Update Messi stats with animation
            const messiPercentage = document.getElementById('messiPercentage');
            const messiVotes = document.getElementById('messiVotes');
            const messiProgress = document.getElementById('messiProgress');
            
            messiPercentage.textContent = `${data.stats.messi.percentage}%`;
            messiVotes.textContent = `${data.stats.messi.votes.toLocaleString()} votes`;
            messiProgress.style.width = `${data.stats.messi.percentage}%`;
            
            // Update total votes
            document.getElementById('totalVotes').textContent = data.stats.totalVotes.toLocaleString();
        }
    } catch (error) {
        console.error('Error updating voting stats:', error);
        showNotification('Error updating voting statistics', 'error');
    }
}

async function castVote(choice) {
    if (!currentWalletAddress || !votingEnabled) return;

    const goatBalance = parseFloat(document.getElementById('userGoatBalance').textContent.replace(/,/g, ''));
    const userTimezone = Intl.DateTimeFormat().resolvedOptions().timeZone;
    const localTime = new Date().toISOString();
    
    try {
        const response = await fetch('/vote/cast-vote', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                wallet: currentWalletAddress,
                choice,
                goatBalance,
                sessionId: '<%= typeof sessionID !== "undefined" ? sessionID : "" %>',
                timezone: userTimezone,
                localTime: localTime
            })
        });

        const data = await response.json();
        
        if (data.success) {
            showNotification('Vote cast successfully!', 'success');
            await updateVotingStats();
            votingEnabled = false;
            
            if (data.nextVoteTime) {
                updateTimer(data.nextVoteTime);
            }
            
            document.getElementById('votingButtons').classList.add('hidden');
            document.getElementById('voteButton').classList.remove('hidden');
            await checkVotingEligibility();
        } else {
            showNotification(data.message, 'error');
        }
    } catch (error) {
        console.error('Error casting vote:', error);
        showNotification('Failed to cast vote. Please try again.', 'error');
    }
}

function showVotingButtons() {
    if (!votingEnabled) return;
    
    document.getElementById('voteButton').classList.add('hidden');
    document.getElementById('votingButtons').classList.remove('hidden');
}

async function checkWalletChange() {
    if (!isWalletConnected()) {
        currentWalletAddress = null;
        resetBalance();
        return false;
    }

    const newWalletAddress = window.solana.publicKey.toString();
    if (newWalletAddress !== currentWalletAddress) {
        currentWalletAddress = newWalletAddress;
        return true;
    }
    return false;
}

async function fetchAndDisplayTokens() {
    if (!isWalletConnected()) {
        console.log('Waiting for wallet connection...');
        resetBalance();
        return;
    }

    const walletChanged = await checkWalletChange();
    if (!walletChanged && currentWalletAddress) {
        return;
    }

    showLoading();

    try {
        const response = await fetch('/wallet/get-tokens', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ wallet: currentWalletAddress })
        });

        const data = await response.json();
        
        if (data.success) {
            const goatToken = data.tokens.find(token => 
                token.mint === '<%= process.env.YOUR_GOAT_TOKEN_MINT_ADDRESS %>'
            );
            
            const balanceElement = document.getElementById('userGoatBalance');
            const voteButton = document.getElementById('voteButton');
            const buyGoatButton = document.getElementById('buyGoatButton');
            const votingButtons = document.getElementById('votingButtons');
            
            if (goatToken) {
                const balance = parseFloat(goatToken.balance);
                balanceElement.textContent = balance.toLocaleString();
                
                // Enable voting if user has GOAT tokens
                if (balance > 0) {
                    voteButton.disabled = false;
                    buyGoatButton.classList.add('hidden');
                } else {
                    voteButton.disabled = true;
                    buyGoatButton.classList.remove('hidden');
                    votingButtons.classList.add('hidden');
                }
            } else {
                balanceElement.textContent = '0';
                voteButton.disabled = true;
                buyGoatButton.classList.remove('hidden');
                votingButtons.classList.add('hidden');
            }

            // Check voting eligibility after getting token balance
            await checkVotingEligibility();
            
            // Update user history
            await fetchUserHistory();
        } else {
            resetBalance();
            showNotification('Failed to fetch token balance', 'error');
        }
    } catch (error) {
        console.error('Error:', error);
        resetBalance();
        showNotification('Error fetching token balance', 'error');
    } finally {
        hideLoading();
    }
}

async function fetchUserHistory() {
    if (!currentWalletAddress) return;

    try {
        const response = await fetch(`/vote/user-history/${currentWalletAddress}`);
        const data = await response.json();
        
        if (data.success) {
            document.getElementById('userTotalVotes').textContent = data.history.totalVotes.toLocaleString();
            
            if (data.history.lastVoteTime) {
                const nextVoteTime = data.history.lastVoteTime + VOTING_COOLDOWN;
                if (nextVoteTime > Date.now()) {
                    updateTimer(nextVoteTime);
                }
            }
        }
    } catch (error) {
        console.error('Error fetching user history:', error);
        showNotification('Error fetching voting history', 'error');
    }
}

// Initialize periodic updates with optimized intervals
const tokenCheckInterval = setInterval(fetchAndDisplayTokens, 5000); // Every 5 seconds
const statsUpdateInterval = setInterval(updateVotingStats, 30000); // Every 30 seconds

// Initialize when DOM loads
document.addEventListener('DOMContentLoaded', () => {
    fetchAndDisplayTokens();
    updateVotingStats();
    document.getElementById('voteButton').onclick = showVotingButtons;
});

// Listen for wallet connection events
if (window.solana) {
    window.solana.on('connect', () => {
        currentWalletAddress = null;
        fetchAndDisplayTokens();
        fetchUserHistory();
    });
    
    window.solana.on('disconnect', () => {
        currentWalletAddress = null;
        resetBalance();
        clearInterval(timerInterval);
    });

    window.solana.on('accountChanged', () => {
        currentWalletAddress = null;
        fetchAndDisplayTokens();
        fetchUserHistory();
    });
}

// Clean up on page unload
window.addEventListener('beforeunload', () => {
    clearInterval(timerInterval);
    clearInterval(tokenCheckInterval);
    clearInterval(statsUpdateInterval);
});
</script>